js_import xj from xml-js.js;
js_import conf.d/xml2json.js;
js_import conf.d/andrew.js;
resolver 8.8.8.8;
client_body_buffer_size 256k;
subrequest_output_buffer_size 512k;

log_format kv '$time_iso8601 client=$remote_addr method=$request_method uri=$request_uri status=$status bytes_in=$request_length bytes_out=$bytes_sent';

server {
    listen 80;
    default_type text/plain;
    access_log /var/log/nginx/access.log kv;
    error_log /var/log/nginx/error.log debug;

    # This location converts a GET-only XML service into JSON
    # (response-only translation)
    location /api/f1/ {
        js_header_filter xml2json.contentTypeJson; # Requires njs 0.5.1
        js_body_filter   xml2json.filter_xml2json; # Requires njs 0.5.2
        proxy_pass http://ergast.com; # Please respect http://ergast.com/mrd/terms/
        proxy_buffering off;
    }

    # These locations serve an XML API to a JSON client
    # (request and response translation)
    location /echo {
        # Here we handle all of the client-to-nginx configuration
        set $proxy_location /_echo_proxy;
        js_content xml2json.proxy_json2xml;
    }
    location = /_echo_proxy {
        # Here we handle all of the nginx-to-backend configuration
        proxy_set_header Accept text/xml;
        proxy_pass http://127.0.0.1:9000$request_uri;
        internal; # This location cannot be requested by external clients
    }

    location /andrew {
        set $proxy_location /_andrew_proxy;
        js_content andrew.proxy_rest2soap;
        #js_content xml2json.proxy_json2xml;
    }

    location = /_andrew_proxy {
        # Here we handle all of the nginx-to-backend configuration
        proxy_set_header Accept text/xml;
        proxy_pass http://host.docker.internal:8080/ws;
        internal; # This location cannot be requested by external clients
    }

    location / {
        default_type application/json;
        return 200 '["/api/f1/*", "/echo", "/andrew"]\n';
    }
}

# vim: syntax=nginx
